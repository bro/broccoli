#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Directory:
    --builddir=DIR         place build files in directory [build]

  Installation Directories:
    --prefix=PREFIX        installation directory [/usr/local]
    --python-install-dir   the desired installation directory for
                           broccoli python bindings (if present)
                           [PREFIX/lib/python]

  Optional Features:
    --enable-debug         compile with debugging symbols
    --enable-release       compile with optimizations
    --enable-shared        build shared libraries [default=yes]
                           mutually exclusive with --enable-static
    --enable-static        build static libraries [default=no]
                           mutually exclusive with --enable-shared
    --disable-packets      Do not support tx/rx of pcap packets
    --with-configfile=FILE use config file at location <FILE>

  Required Packages in Non-Standard Locations:
    --with-openssl=PATH    path to OpenSSL install root

  Optional Packages in Non-Standard Locations:
    --with-pcap=PATH       path to libpcap install root

  Influential Environment Variables (only on first invocation
  per build directory):
    CC                     C compiler command
    CFLAGS                 C compiler flags
    CXX                    C++ compiler command
    CXXFLAGS               C++ compiler flags
"

sourcedir=`dirname $0`
if [ "$sourcedir" = "." ]; then
    sourcedir=`pwd`
fi

# Function to append a CMake cache entry definition to the
# CMakeCacheEntries variable
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry () {
    CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

# set defaults
builddir=build
CMakeCacheEntries=""
append_cache_entry CMAKE_INSTALL_PREFIX PATH     /usr/local
append_cache_entry PY_MOD_INSTALL_DIR   PATH     /usr/local/lib/python
append_cache_entry ENABLE_DEBUG         BOOL     false
append_cache_entry ENABLE_RELEASE       BOOL     false
append_cache_entry BUILD_SHARED_LIBS    BOOL     true
append_cache_entry BRO_PCAP_SUPPORT     BOOL     true

# parse arguments
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --builddir=*)
            builddir=$optarg
            ;;
        --prefix=*)
            append_cache_entry CMAKE_INSTALL_PREFIX PATH   $optarg
            append_cache_entry PY_MOD_INSTALL_DIR   PATH   $optarg/lib/python
            ;;
        --enable-debug)
            append_cache_entry ENABLE_DEBUG         BOOL   true
            ;;
        --enable-release)
            append_cache_entry ENABLE_RELEASE       BOOL   true
            ;;
        --enable-shared)
            append_cache_entry BUILD_SHARED_LIBS    BOOL   true
            ;;
        --enable-static)
            append_cache_entry BUILD_SHARED_LIBS    BOOL   false
            ;;
        --disable-packets)
            append_cache_entry BRO_PCAP_SUPPORT     BOOL   false
            ;;
        --with-configfile=*)
            append_cache_entry BRO_SYSCONF_FILE FILEPATH $optarg
            ;;
        --python-install-dir=*)
            append_cache_entry PY_MOD_INSTALL_DIR PATH $optarg
            ;;
        --with-openssl=*)
            append_cache_entry OpenSSL_ROOT_DIR PATH $optarg
            ;;
        --with-pcap=*)
            append_cache_entry PCAP_ROOT_DIR PATH $optarg
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

# Create build directory
mkdir -p $builddir

echo "Build Directory : $builddir"
echo "Source Directory: $sourcedir"
cd $builddir
cmake $CMakeCacheEntries $sourcedir
